// Object to hold chart instances
const charts = {};

// Custom plugin to draw horizontal line
const horizontalLinePlugin = {
    id: 'horizontalLine',
    beforeDraw(chart, args, options) {
        const { ctx, chartArea: { top, bottom, left, right }, scales: { y } } = chart;

        ctx.save();
        ctx.strokeStyle = options.color || 'red'; // Line color
        ctx.lineWidth = options.lineWidth || 1;   // Line width
        ctx.setLineDash(options.dash || []);      // Optional dashed line
        const yValue = y.getPixelForValue(options.value);

        ctx.beginPath();
        ctx.moveTo(left, yValue);
        ctx.lineTo(right, yValue);
        ctx.stroke();
        ctx.restore();
    }
};

// Register the plugin
Chart.register(horizontalLinePlugin);

// Function to initialize a chart
function initializeChart(canvasId, label, lineColor) {
    const ctx = document.getElementById(canvasId).getContext('2d');

    const chart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: [], // Empty labels initially
            datasets: [
                {
                    label: label,
                    data: [],
                    borderColor: lineColor,
                    fill: false,
                },
            ],
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            animation: {
                duration: 500,
                easing: 'easeOutQuart'
            },
            plugins: {
                legend: { display: true },
                tooltip: { enabled: true },
                annotation: {
                    annotations: {}, // Placeholder for dynamic annotations
                }
            },
            scales: {
                x: {
                    title: {
                        display: true,
                        text: 'Scan',
                    },
                },
                y: {
                    title: {
                        display: true,
                        text: label,
                    },
                },
            },
        },
    });

    // Add a horizontal line if canvasId is 'transformationChart'
    if (canvasId === 'transformationChart') {
        const desiredValue = readDesiredValue(); // Call the function to get the Y-value
            // Add the horizontal line annotation
            chart.options.plugins = {
                horizontalLine: {
                    value: desiredValue,
                    color: 'red',
                    lineWidth: 2,
                    dash: [5, 5]
                }
            }
    }

    // Save the chart instance
    charts[canvasId] = chart;
}

// Function to update chart data
function updateChart(canvasId, newData) {
    const chart = charts[canvasId];
    if (chart) {
        const labels = chart.data.labels;
        const dataset = chart.data.datasets[0].data;

        // Add a new label and data point
        labels.push(scanNum);
        dataset.push(newData);

        // Keep only the last 10 data points
        if (labels.length > 10) labels.shift();
        if (dataset.length > 10) dataset.shift();

        // Update the chart data
        chart.data.labels = labels;
        chart.data.datasets[0].data = dataset;

        // Update the chart
        chart.update();
    }
}

// Expose functions globally
window.initializeChart = initializeChart;
window.updateChart = updateChart;
